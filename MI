# Re-import necessary libraries after environment reset
import numpy as np
from sklearn.metrics import mutual_info_score
import matplotlib.pyplot as plt

# Define a function to compute mutual information
def compute_mutual_information(x, y, bins=20):
    """
    Compute mutual information between two variables.
    """
    # Discretize x and y into bins for estimation
    x_discretized = np.digitize(x, bins=np.linspace(min(x), max(x), bins))
    y_discretized = np.digitize(y, bins=np.linspace(min(y), max(y), bins))
    # Compute mutual information
    return mutual_info_score(x_discretized, y_discretized)

# Generate sample datasets
np.random.seed(42)
x = np.linspace(-10, 10, 1000)
y_linear = 2 * x + 5 + np.random.normal(0, 1, 1000)  # Linear relationship
y_nonlinear = np.sin(x) + np.random.normal(0, 0.1, 1000)  # Non-linear relationship
y_independent = np.random.normal(0, 1, 1000)  # No relationship

# Compute mutual information
mi_linear = compute_mutual_information(x, y_linear)
mi_nonlinear = compute_mutual_information(x, y_nonlinear)
mi_independent = compute_mutual_information(x, y_independent)

# Visualize the datasets and MI scores
plt.figure(figsize=(15, 5))

# Linear relationship
plt.subplot(1, 3, 1)
plt.scatter(x, y_linear, alpha=0.6, label=f"MI = {mi_linear:.3f}")
plt.title("Linear Relationship")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()

# Non-linear relationship
plt.subplot(1, 3, 2)
plt.scatter(x, y_nonlinear, alpha=0.6, label=f"MI = {mi_nonlinear:.3f}")
plt.title("Non-Linear Relationship")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()

# Independent variables
plt.subplot(1, 3, 3)
plt.scatter(x, y_independent, alpha=0.6, label=f"MI = {mi_independent:.3f}")
plt.title("No Relationship")
plt.xlabel("X")
plt.ylabel("Y")
plt.legend()

plt.tight_layout()
plt.show()
